---
import { getEntry } from "astro:content";
import Base from "./Base.astro";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import type { MarkdownHeading } from "astro";
import TableOfContents from "../components/TableOfContents.astro";
import NarrowContainer from "../containers/NarrowContainer";
import AuthorSmall from "../components/AuthorSmall.astro";

interface Props {
  frontmatter: CollectionEntry<"articles">["data"];
  headings: MarkdownHeading[];
  minutesRead: string;
}

const { frontmatter, headings, minutesRead } = Astro.props;
const {
  canonicalUrl,
  description,
  excerpt,
  heroImage,
  publishedDate,
  summary,
  tags,
  title,
  updatedDate,
} = frontmatter;
const { data: author } = await getEntry(
  frontmatter.author.collection,
  frontmatter.author.id,
);
const series = frontmatter.series
  ? await getEntry(frontmatter.series.collection, frontmatter.series.id)
  : undefined;
const video = frontmatter.video
  ? await getEntry(frontmatter.video.collection, frontmatter.video.id)
  : undefined;

const banner: ImageMetadata = "../assets/images/banner.jpeg";
---

<Base
  article={{
    author: {
      name: author.name,
      // add a twitter username if available
      twitter: author.socials?.twitter,
    },
    updatedTime: updatedDate,
    publishedTime: publishedDate,
    section: "Programming",
    tags: tags,
    video: video?.data.canonicalUrl
      ? new URL(video.data.canonicalUrl)
      : undefined,
  }}
  canonicalUrl={canonicalUrl ? new URL(canonicalUrl) : undefined}
  description={description ?? excerpt}
  image={heroImage
    ? { alt: heroImage.alt, src: heroImage.image.src }
    : undefined}
  {title}
  type="article"
>
  <NarrowContainer>
    <article>
      <header>
        <h1 class="mb-8">{title}</h1>
        <a href=`authors/${frontmatter.author.id}` class="mt-auto">
          <AuthorSmall {author} {minutesRead}>
            <p>
              Last updated: {
                updatedDate ? (
                  <FormattedDate date={updatedDate} />
                ) : (
                  <FormattedDate date={publishedDate} />
                )
              }
            </p>
          </AuthorSmall>
          {
            tags.map((tag) => (
              <span class="inline-flex items-center rounded-md bg-indigo-100 px-2 py-1 text-xs font-medium text-indigo-700 mr-2 mt-2">
                {tag}
              </span>
            ))
          }
        </a>
        <div class="xl:flex xl:flex-row-reverse">
          <div class="flex-auto ml-16 mt-1.5 prose lg:prose-xl">
            <TableOfContents {headings} />
          </div>
          <div
            class="flex-auto prose lg:prose-xl prose-img:rounded-lg prose-code:before:hidden prose-code:after:hidden"
          >
            <slot />
          </div>
        </div>
        <footer></footer>
      </header>
    </article>
  </NarrowContainer>
</Base>
