---
import { getEntry } from "astro:content";
import Base from "./Base.astro";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import type { MarkdownHeading } from "astro";
import TableOfContents from "../components/TableOfContents.astro";
import NarrowContainer from "../containers/NarrowContainer";
import AuthorSmall from "../components/AuthorSmall.astro";

interface Props {
  frontmatter: CollectionEntry<"articles">["data"];
  headings: MarkdownHeading[];
}

const { frontmatter, headings } = Astro.props;
const {
  canonicalUrl,
  description,
  excerpt,
  heroImage,
  publishedDate,
  summary,
  tags,
  title,
  updatedDate,
} = frontmatter;
const { data: author } = await getEntry(
  frontmatter.author.collection,
  frontmatter.author.id,
);
const series = frontmatter.series
  ? await getEntry(frontmatter.series.collection, frontmatter.series.id)
  : undefined;
const video = frontmatter.video
  ? await getEntry(frontmatter.video.collection, frontmatter.video.id)
  : undefined;

type banner = ImageMetadata;
const banner = "../assets/images/banner.jpeg";
// const formatDate = (date: Date) =>
//   date.toLocaleDateString("en-US", {
//     weekday: "short",
//     month: "short",
//     day: "2-digit",
//     timeZone: "UTC",
//   });
function buildHierarchy(headings: MarkdownHeading[]) {
  {
    const toc: MarkdownHeading[] = [];
    const parentHeadings = new Map();

    if (!headings) return toc;

    headings.forEach((h: MarkdownHeading) => {
      const heading = { ...h, subheadings: [] };
      parentHeadings.set(heading.depth, heading);
      // Change 2 to 1 if your markdown includes your <h1>
      if (heading.depth === 2) {
        toc.push(heading);
      } else {
        parentHeadings.get(heading.depth - 1).subheadings.push(heading);
      }
    });
    return toc;
  }
}
---

<Base
  article={{
    author: {
      name: author.name,
      // add a twitter username if available
      twitter: author.socials?.twitter,
    },
    updatedTime: updatedDate,
    publishedTime: publishedDate,
    section: "Programming",
    tags: tags,
    video: video?.data.canonicalUrl
      ? new URL(video.data.canonicalUrl)
      : undefined,
  }}
  canonicalUrl={canonicalUrl ? new URL(canonicalUrl) : undefined}
  description={description ?? excerpt}
  image={heroImage
    ? { alt: heroImage.alt, src: heroImage.image.src }
    : undefined}
  {title}
  type="article"
>
  <NarrowContainer>
    <article
      class="prose lg:prose-xl prose-img:rounded-lg prose-code:before:hidden prose-code:after:hidden"
    >
      <header>
        <h1>{title}</h1>
        <p>
          Last updated: {
            updatedDate ? (
              <FormattedDate date={updatedDate} />
            ) : (
              <FormattedDate date={publishedDate} />
            )
          }
        </p>
        <AuthorSmall {author} />
        <TableOfContents {headings} />
        <slot />
        <footer></footer>
      </header>
    </article>
  </NarrowContainer>
</Base>
