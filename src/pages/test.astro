---
import "@styles/base.css";
import Card from "./_Card.astro";

const cardData = [
  {
    title: "Galaxy Swirls",
    img: {
      src: "https://raw.githubusercontent.com/coding-in-public/tailwind-darkmode/main/src/assets/images/image-1.png",
      alt: "galaxy swirl",
    },
    description:
      "Galaxy swirls refer to the patterns of stars and gas within galaxies that appear as spiral arms. These arms are formed by the gravitational forces between stars and the rotation of the galaxy.",
    cta: "Let's Gooooooo!",
  },
  {
    title: "Rad Beaches",
    img: {
      src: "https://raw.githubusercontent.com/coding-in-public/tailwind-darkmode/main/src/assets/images/image-2.png",
      alt: "beach at sunset",
    },
    description:
      "Beaches at sunset offer a picturesque view of the sun setting over the ocean, with warm hues of orange, pink, and purple painting the sky. It's a serene and romantic experience.",
    cta: "Take me surfing!",
  },
  {
    title: "Killer Mountains",
    img: {
      src: "https://raw.githubusercontent.com/coding-in-public/tailwind-darkmode/main/src/assets/images/image-3.png",
      alt: "jagged mountains",
    },
    description:
      "Mountains are majestic landforms characterized by steep slopes and high elevations. They are often associated with natural beauty, adventure, and challenge, and are home to diverse ecosystems and unique cultures.",
    cta: "Pack My Bags",
  },
];
---

<html>
  <head>
    <script is:inline>
      const setDataTheme = () =>
        document.documentElement.setAttribute(
          "data-theme",
          localStorage.getItem("theme") === "system"
            ? window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "light"
            : localStorage.getItem("theme")
        );

      localStorage.getItem("theme") || localStorage.setItem("theme", "system");
      console.log(localStorage.getItem("theme"));
      setDataTheme();
      console.log(document.documentElement.getAttribute("data-theme"));
      document.addEventListener("DOMContentLoaded", () => {
        document.getElementById("themeToggle").addEventListener("click", () => {
          localStorage.setItem(
            "theme",
            localStorage.getItem("theme") === "system"
              ? "light"
              : localStorage.getItem("theme") === "light"
                ? "dark"
                : "system"
          );
          setDataTheme();
          console.log(localStorage.getItem("theme"));
          console.log(document.documentElement.getAttribute("data-theme"));
        });
      });
    </script>
  </head>
  <body>
    <main>
      <header class="bg-content">
        <button
          id="themeToggle"
          type="button"
          class="rounded-full bg-indigo-600 p-1 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
        >
          <svg
            class="h-5 w-5"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"
            ></path>
          </svg>
        </button>
      </header>
      <div
        class="bg-bkg text-content isolate overflow-hidden p-4 sm:p-8 grid place-items-center"
      >
        <div
          class="grid relative min-h-screen place-items-center place-content-center gap-16 before:absolute before:h-1/2 before:w-3/4 before:rounded-tr-full before:rounded-bl-full before:blur-3xl before:bg-accent-2 before:animate-spin-slower before:-z-10 after:absolute after:h-2/3 after:w-2/3 after:rounded-tr-full after:rounded-bl-full after:blur-3xl after:bg-accent-1/40 after:animate-spin-slow after:-z-10"
        >
          <h1 class="text-6xl font-bold">
            <span class="underline decoration-accent-1">Dark</span> or{" "}
            <span class="underline decoration-accent-1">Light</span>?
          </h1>
          <section
            class="container grid sm:grid-cols-2 md:grid-cols-3 gap-6 items-start"
            aria-label="card container"
          >
            {cardData.map((card) => <Card {...card} key={card.title} />)}
          </section>
        </div>
      </div>
    </main>
  </body>
</html>
