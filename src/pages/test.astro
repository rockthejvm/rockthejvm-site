---
import ThemeToggle from "@components/ThemeToggle.astro";
import "@styles/base.css";
import Card from "./_Card.astro";

const cardData = [
  {
    title: "Galaxy Swirls",
    img: {
      src: "https://raw.githubusercontent.com/coding-in-public/tailwind-darkmode/main/src/assets/images/image-1.png",
      alt: "galaxy swirl",
    },
    description:
      "Galaxy swirls refer to the patterns of stars and gas within galaxies that appear as spiral arms. These arms are formed by the gravitational forces between stars and the rotation of the galaxy.",
    cta: "Let's Gooooooo!",
  },
  {
    title: "Rad Beaches",
    img: {
      src: "https://raw.githubusercontent.com/coding-in-public/tailwind-darkmode/main/src/assets/images/image-2.png",
      alt: "beach at sunset",
    },
    description:
      "Beaches at sunset offer a picturesque view of the sun setting over the ocean, with warm hues of orange, pink, and purple painting the sky. It's a serene and romantic experience.",
    cta: "Take me surfing!",
  },
  {
    title: "Killer Mountains",
    img: {
      src: "https://raw.githubusercontent.com/coding-in-public/tailwind-darkmode/main/src/assets/images/image-3.png",
      alt: "jagged mountains",
    },
    description:
      "Mountains are majestic landforms characterized by steep slopes and high elevations. They are often associated with natural beauty, adventure, and challenge, and are home to diverse ecosystems and unique cultures.",
    cta: "Pack My Bags",
  },
];
---

<html>
  <head>
    <script is:inline>
      const setDataTheme = () => {
        document.documentElement.setAttribute(
          "data-theme",
          localStorage.getItem("theme") === "system"
            ? window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "light"
            : localStorage.getItem("theme"),
        );
      };
      const setThemeToggle = () => {
        document.getElementById("systemTheme").style.display = "none";
        document.getElementById("lightTheme").style.display = "none";
        document.getElementById("darkTheme").style.display = "none";
        document.getElementById(
          localStorage.getItem("theme") === "system"
            ? "systemTheme"
            : localStorage.getItem("theme") === "light"
              ? "lightTheme"
              : "darkTheme",
        ).style.display = "block";
      };

      localStorage.getItem("theme") || localStorage.setItem("theme", "system");
      setDataTheme();
      document.addEventListener("DOMContentLoaded", () => {
        setThemeToggle();
        document.getElementById("themeToggle").addEventListener("click", () => {
          localStorage.setItem(
            "theme",
            localStorage.getItem("theme") === "system"
              ? "light"
              : localStorage.getItem("theme") === "light"
                ? "dark"
                : "system",
          );
          setDataTheme();
          setThemeToggle();
        });
      });
    </script>
  </head>
  <body>
    <main>
      <header class="flex size-10 items-center">
        <ThemeToggle id="themeToggle" />
      </header>
      <div
        class="isolate grid place-items-center overflow-hidden bg-bkg p-4 text-content sm:p-8"
      >
        <div
          class="relative grid min-h-screen place-content-center place-items-center gap-16 before:absolute before:-z-10 before:h-1/2 before:w-3/4 before:animate-spin-slower before:rounded-bl-full before:rounded-tr-full before:bg-accent-2 before:blur-3xl after:absolute after:-z-10 after:h-2/3 after:w-2/3 after:animate-spin-slow after:rounded-bl-full after:rounded-tr-full after:bg-accent-1/40 after:blur-3xl"
        >
          <h1 class="text-6xl font-bold">
            <span class="underline decoration-accent-1">Dark</span> or{" "}
            <span class="underline decoration-accent-1">Light</span>?
          </h1>
          <section
            class="container grid items-start gap-6 sm:grid-cols-2 md:grid-cols-3"
            aria-label="card container"
          >
            {cardData.map((card) => <Card {...card} key={card.title} />)}
          </section>
        </div>
      </div>
    </main>
  </body>
</html>
