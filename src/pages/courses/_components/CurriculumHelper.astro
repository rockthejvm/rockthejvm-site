---
import { z } from "astro/zod";

interface Props {
  color: CollectionEntry<"courseCategories">["data"]["color"];
  pricingPlanId: CollectionEntry<"courses">["data"]["pricingPlanId"];
  courseId: CollectionEntry<"courses">["id"];
}

const ResponseSchema = z.array(
  z.object({
    name: z.string(),
    lectures: z.array(
      z.object({
        id: z.number().int().nonnegative(),
        name: z.string().optional(),
        media_duration: z.number().int().nonnegative(),
      }),
    ),
  }),
);

const { color, courseId, pricingPlanId } = Astro.props,
  response = await fetch(
    "https://rtjvm-teachable-worker.andrei-023.workers.dev/curriculum/5645634",
  ),
  responseData = await response.json(),
  lectureSections = ResponseSchema.parse(responseData);
---

{
  lectureSections.map((lectureSection) => (
    <Fragment>
      <h3 class="mb-4 text-center text-2xl font-bold">{lectureSection.name}</h3>
      {lectureSection.lectures.map(({ id, media_duration, name }) => (
        <div class="text-lg text-gray-700">
          <a
            href={`https://courses.rockthejvm.com/courses/${courseId}/lectures/${id}`}
            target="_blank"
            rel="noreferrer"
          >
            {name}
          </a>
        </div>
        <p>{(media_duration / 60).toFixed(2)} minutes</p>
      ))}
    </Fragment>
  ))
}
