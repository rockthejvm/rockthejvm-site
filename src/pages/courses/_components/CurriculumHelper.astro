---
import { z } from "astro/zod";

interface Props {
  color: CollectionEntry<"courseCategories">["data"]["color"];
  pricingPlanId: CollectionEntry<"courses">["data"]["pricingPlanId"];
  courseId: CollectionEntry<"courses">["id"];
}

const ResponseSchema = z.array(
  z.object({
    id: z.number().int().nonnegative(),
    name: z.string(),
    lectures: z.array(
      z.object({
        id: z.number().int().nonnegative(),
        name: z.string().optional(),
        media_duration: z.number().int().nonnegative(),
      }),
    ),
  }),
);

const { color, courseId, pricingPlanId } = Astro.props,
  response = await fetch(
    `https://rtjvm-teachable-worker.andrei-023.workers.dev/curriculum/${pricingPlanId}`,
  ),
  responseData = await response.json(),
  lectureSections = ResponseSchema.parse(responseData);
---

{
  lectureSections.map((lectureSection) => (
    <div class="mx-auto max-w-3xl">
      <div class="mb-4 min-w-0 flex-auto pl-4" style={{ background: color }}>
        <h3 class="py-4 pl-4">{lectureSection.name}</h3>
      </div>

      {lectureSection.lectures.map(({ id, media_duration, name }) => (
        <div class="flex justify-between gap-x-6 py-2">
          <div class="text-lg text-content">
            <span>
              <a
                href={`https://courses.rockthejvm.com/courses/${courseId}/lectures/${id}`}
                target="_blank"
                rel="noreferrer"
              >
                {name}
              </a>
              ({(media_duration / 60).toFixed(2)} min)
            </span>
          </div>

          <a
            href={`https://courses.rockthejvm.com/courses/${courseId}/lectures/${id}`}
            style={{ background: color }}
            class="rounded-md px-3.5 py-2.5 shadow-sm"
          >
            <span class="text-sm font-semibold text-content hover:text-content hover:no-underline">
              Start
            </span>
          </a>
        </div>
      ))}
    </div>
  ))
}
