---
import Profile from "@components/Profile.astro";
import Roadmap from "@components/Roadmap";
import site from "@data/site.json";
import { capitalizeFirstChar } from "@utils/capitalizeFirstChar.ts";
import { getEntries, getEntry, type CollectionEntry } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import {
  type ReactFlowEdge,
  type ReactFlowNode,
} from "../../../types/ReactFlow.ts";
import BundledCourses from "../_sections/BundledCourses.astro";
import CourseFAQ from "../_sections/CourseFAQ.astro";
import CourseVideo from "../_sections/CourseVideo.astro";
import Curriculum from "../_sections/Curriculum.astro";
import Features from "../_sections/Features.astro";
import Goal from "../_sections/Goal.astro";
import Hero from "../_sections/Hero.astro";
import Pricing from "../_sections/Pricing.astro";
import Question from "../_sections/Question.astro";
import Skills from "../_sections/Skills.astro";
import TechStack from "../_sections/TechStack.astro";

interface Response {
  price: number;
}

const course = await getEntry(
  "courses",
  Astro.params.slug as CollectionEntry<"courses">["slug"],
);
const _frontmatter = course.data;
const [bundledCourses, _categoryFrontmatter, collaborators] = await Promise.all(
  [
    _frontmatter.bundledCourses
      ? getEntries(_frontmatter.bundledCourses)
      : Promise.resolve([]),
    getEntry(_frontmatter.category.collection, _frontmatter.category.id).then(
      (category) => category.data,
    ),
    _frontmatter.collaborators
      ? await Promise.all(
          _frontmatter.collaborators.map(async (collaborator) => ({
            frontmatter: (
              await getEntry(
                collaborator.author.collection,
                collaborator.author.id,
              )
            ).data,
            biography: collaborator.biography,
          })),
        )
      : [],
  ],
);
const { color: categoryColor, faqs: categoryFaqs } = _categoryFrontmatter;
const {
  includedInMembership,
  benefits,
  description,
  difficulty,
  faqs,
  features,
  heroImage,
  instructors: _instructors,
  isFree,
  pricingPlanId,
  question,
  technologies,
  thanks,
  title,
  videoId,
  hasGoal,
  hasSkills,
  instructorEnabled,
  active,
} = _frontmatter;

const instructors = await getEntries<"authors">(_instructors);

const response = await fetch(
  `https://rockthejvm.com/api/purchase/${pricingPlanId}`,
);

const { price }: Response = await response.json();

function difficultyToOrdinal(
  difficulty: "beginner" | "intermediate" | "advanced",
): number {
  switch (difficulty) {
    case "beginner":
      return 1;
    case "intermediate":
      return 2;
    case "advanced":
      return 3;
    default:
      return 0;
  }
}
const prerequisites = await getEntry("prerequisites", "scala");

const reactFlowNodes: ReactFlowNode[] = prerequisites.data.nodes.map(
  (node) => ({
    id: node.slug,
    position: { x: 0, y: 0 },
    data: { label: node.slug },
  }),
);

const reactFlowEdges: ReactFlowEdge[] = prerequisites.data.edges.map(
  (edge) => ({
    id: `${edge.from.slug}TO${edge.to.slug}`,
    source: edge.from.slug,
    target: edge.to.slug,
    type: "smoothstep",
    animated: edge.optional ? true : false,
  }),
);

// type Slug = string;
// interface SlugTreeNode {
//   value: Slug;
//   children: SlugTreeNode[];
// }
// interface Edge {
//   id: string;
//   source: string;
//   target: string;
//   type: string;
//   animated: boolean;
// }
// interface EdgeTreeNode {
//   value: Edge;
//   children: EdgeTreeNode[];
// }
// function _slugToEdge(root: SlugTreeNode): EdgeTreeNode {
//   return {
//     value: { id: "", source: "", target: "", animated: true },
//     children: root.children.map((child) => ({
//       value: {
//         id: `${root.value}TO${child.value}`,
//         source: root.value,
//         target: child.value,
//         type: "smoothstep",
//         animated: false,
//       },
//       children: _slugToEdge(child).children,
//     })),
//   };
// }

// const _treeToList = (root: EdgeTreeNode): Edge[] =>
//   root.children.flatMap((child) => [child.value, ..._treeToList(child)]);

// const initialEdges = _treeToList(_slugToEdge(prerequisites.data.root));
// const _nodes = [
//   ...new Set(initialEdges.flatMap((edge) => [edge.source, edge.target])),
// ];
// const initialNodes = _nodes.map((node) => ({
//   id: node,
//   position: {
//     x: 0,
//     y: 0,
//   },
//   data: {
//     label: node,
//   },
// }));

const structuredData = JSON.stringify({
  "@context": "https://schema.org",
  "@type": "Course",
  name: title,
  description: description,
  provider: {
    "@type": "Organization",
    name: site.name,
    url: Astro.site,
  },
  offers: [
    isFree
      ? {
          "@type": "Offer",
          category: "Free",
        }
      : {
          "@type": "Offer",
          category: "Paid",
          priceCurrency: "USD",
          price: price / 100,
        },
  ],
  hasCourseInstance: [
    {
      "@type": "CourseInstance",
      courseMode: "Online",
      courseWorkload: `PT${2 * (bundledCourses.length > 0 ? bundledCourses.map((course) => course.data.benefits!.hours).reduce((b, a) => b + a, 0) : benefits!.hours)}H`,
      instructor: instructors.map((instructor) => ({
        "@type": "Person",
        name: instructor.data.name,
        description:
          instructor.data.biography ??
          (instructor.data.company
            ? `${instructor.data.company.role} at ${instructor.data.company?.entity}.`
            : ""),
        image: instructor.data.photo.src,
      })),
    },
  ],
  availableLanguage: ["en"],
  educationalLevel: capitalizeFirstChar(
    difficulty ??
      bundledCourses
        .map((course) => course.data.difficulty ?? "beginner")
        .reduce(
          (b, a) => (difficultyToOrdinal(a) > difficultyToOrdinal(b) ? a : b),
          "beginner",
        ),
  ),
  image: [heroImage.src],
  inLanguage: "en",
  publisher: {
    "@type": "Organization",
    name: site.name,
    url: Astro.site,
  },
});
---

<BaseLayout
  {description}
  {title}
  image={{ alt: title, src: heroImage.src }}
  {structuredData}
>
  <article>
    <Hero {description} {heroImage} {pricingPlanId} {title} {active} />
    {
      videoId && (
        <CourseVideo color={categoryColor} {videoId}>
          <slot />
        </CourseVideo>
      )
    }
    <slot name="description" />
    {
      hasGoal && (
        <Goal color={categoryColor}>
          <slot name="goal" />
        </Goal>
      )
    }
    {
      question && (
        <Question color={categoryColor} {question}>
          <slot name="question" />
        </Question>
      )
    }
    {
      features && (
        <Features color={categoryColor} {features}>
          <slot name="verticalSection" slot="verticalSection" />
          <slot name="feature1" slot="feature1" />
          <slot name="feature2" slot="feature2" />
          <slot name="feature3" slot="feature3" />
          <slot name="feature4" slot="feature4" />
          <slot name="feature5" slot="feature5" />
        </Features>
      )
    }
    <h2>{`${prerequisites.data.title} Roadmap`}</h2>
    {
      !(bundledCourses.length > 0) && (
        <div id="app">
          <Roadmap
            client:load
            initialNodes={reactFlowNodes}
            initialEdges={reactFlowEdges}
          />
        </div>
      )
    }
    {technologies && <TechStack {technologies} color={categoryColor} />}
    {
      hasSkills && (
        <Skills color={categoryColor}>
          <slot name="skills" />
        </Skills>
      )
    }
    {
      instructorEnabled && (
        <Profile color={categoryColor} {collaborators} {thanks} />
      )
    }
    {
      bundledCourses.length > 1 ? (
        <BundledCourses color={categoryColor} {bundledCourses} />
      ) : (
        <Curriculum
          color={categoryColor}
          courseSlug={course.slug}
          {pricingPlanId}
        />
      )
    }
    <Pricing
      {includedInMembership}
      {benefits}
      {bundledCourses}
      color={categoryColor}
      courseSlug={course.slug}
      {pricingPlanId}
      {title}
      {active}
    />
    <CourseFAQ
      {categoryFaqs}
      courseFaqs={faqs}
      color={categoryColor}
      isBundle={benefits === undefined}
    />
  </article>
</BaseLayout>
<style is:global>
  #app {
    width: 100vw;
    height: 100vh;
  }
</style>
