---
import Profile from "@components/Profile.astro";
import Roadmap from "@components/Roadmap";
import site from "@data/site.json";
import capitalizeFirstChar from "@utils/capitalizeFirstChar.ts";
import {
  type CollectionEntry,
  getCollection,
  getEntries,
  getEntry,
} from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import type { ReactFlowEdge, ReactFlowNode } from "../../../types/ReactFlow.ts";
import BundledCourses from "../_sections/BundledCourses.astro";
import CourseFAQ from "../_sections/CourseFAQ.astro";
import CourseVideo from "../_sections/CourseVideo.astro";
import Curriculum from "../_sections/Curriculum.astro";
import Features from "../_sections/Features.astro";
import Goal from "../_sections/Goal.astro";
import Hero from "../_sections/Hero.astro";
import Pricing from "../_sections/Pricing.astro";
import Question from "../_sections/Question.astro";
import Skills from "../_sections/Skills.astro";
import TechStack from "../_sections/TechStack.astro";

interface Response {
  price: number;
}

const course = await getEntry(
    "courses",
    Astro.params.slug as CollectionEntry<"courses">["slug"],
  ),
  _frontmatter = course.data,
  [bundledCourses, _categoryFrontmatter, collaborators] = await Promise.all([
    _frontmatter.bundledCourses
      ? getEntries(_frontmatter.bundledCourses)
      : Promise.resolve([]),
    getEntry(_frontmatter.category.collection, _frontmatter.category.id).then(
      (category) => category.data,
    ),
    _frontmatter.collaborators
      ? await Promise.all(
          _frontmatter.collaborators.map(async (collaborator) => ({
            frontmatter: (
              await getEntry(
                collaborator.author.collection,
                collaborator.author.id,
              )
            ).data,
            biography: collaborator.biography,
          })),
        )
      : [],
  ]),
  isBundle = bundledCourses.length > 0,
  tags = await getEntries(_frontmatter.tags ?? []),
  { color: categoryColor, faqs: categoryFaqs } = _categoryFrontmatter,
  {
    includedInMembership,
    benefits,
    description,
    difficulty,
    faqs,
    features,
    heroImage,
    instructors: _instructors,
    isFree,
    pricingPlanId,
    question,
    technologies,
    thanks,
    title,
    videoId,
    hasGoal,
    hasSkills,
    instructorEnabled,
  } = _frontmatter,
  instructors = await getEntries<"authors">(_instructors),
  response = await fetch(
    `https://rockthejvm.com/api/purchase/${pricingPlanId.toFixed(0)}`,
  ),
  { price } = (await response.json()) as Response;

function difficultyToOrdinal(
  difficulty: "beginner" | "intermediate" | "advanced",
): number {
  switch (difficulty) {
    case "beginner": {
      return 1;
    }
    case "intermediate": {
      return 2;
    }
    case "advanced": {
      return 3;
    }
    default: {
      return 0;
    }
  }
}
const prerequisitess = await getCollection("prerequisites"),
  prerequisites = prerequisitess.find((prerequisites) =>
    prerequisites.data.nodes.find((node) => node.slug === course.slug),
  ),
  reactFlowNodes: ReactFlowNode[] | undefined = prerequisites
    ? await Promise.all(
        prerequisites.data.nodes.map(async (node) => ({
          id: node.slug,
          type: "linkNode",
          position: { x: 0, y: 0 },
          data: {
            difficulty: (await getEntry("courses", node.slug)).data.difficulty,
            isCurrent: node.slug === course.slug,
            label: (await getEntry("courses", node.slug)).data.title,
            href: `/courses/${node.slug}`,
          },
        })),
      )
    : undefined,
  reactFlowEdges: ReactFlowEdge[] | undefined = prerequisites?.data.edges.map(
    (edge) => ({
      id: `${edge.from.slug}TO${edge.to.slug}`,
      source: edge.from.slug,
      target: edge.to.slug,
      // type: "smart",
      animated: Boolean(edge.optional),
    }),
  ),
  companies = await getCollection("companies"),
  structuredData = JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Course",
    name: title,
    description,
    provider: {
      "@type": "Organization",
      name: site.name,
      url: Astro.site,
    },
    offers: [
      isFree
        ? {
            "@type": "Offer",
            category: "Free",
          }
        : {
            "@type": "Offer",
            category: "Paid",
            priceCurrency: "USD",
            price: price / 100,
          },
    ],
    hasCourseInstance: [
      {
        "@type": "CourseInstance",
        courseMode: "Online",
        courseWorkload: `PT${Math.round(2 * (isBundle ? bundledCourses.map((course) => course.data.benefits!.hours).reduce((b, a) => b + a, 0) : benefits!.hours)).toFixed(0)}H`,
        instructor: instructors.map((instructor) => ({
          "@type": "Person",
          name: instructor.data.name,
          description:
            instructor.data.biography ??
            (instructor.data.company
              ? `${instructor.data.company.role} at ${companies.find(({ id }) => id === instructor.data.company!.entity.id)!.data.title}.`
              : ""),
          image: instructor.data.photo.src,
        })),
      },
    ],
    availableLanguage: ["en"],
    educationalLevel: capitalizeFirstChar(
      difficulty ??
        bundledCourses
          .map((course) => course.data.difficulty ?? "beginner")
          .reduce(
            (b, a) => (difficultyToOrdinal(a) > difficultyToOrdinal(b) ? a : b),
            "beginner",
          ),
    ),
    image: [heroImage.src],
    inLanguage: "en",
    publisher: {
      "@type": "Organization",
      name: site.name,
      url: Astro.site,
    },
  });
---

<BaseLayout
  {description}
  {title}
  image={{ alt: title, src: heroImage.src }}
  {structuredData}
  searchIndexable={true}
>
  {!isBundle && <div data-pagefind-filter={`Difficulties: ${difficulty!}`} />}
  <div data-pagefind-filter="Categories:Courses (All)"></div>
  <div
    data-pagefind-filter={`Categories:${isBundle ? "Courses (Bundles)" : "Courses (Singles)"}`}
  >
  </div>
  {
    instructors.map((instructor) => (
      <div data-pagefind-filter={`Authors:${instructor.data.name}`} />
    ))
  }
  {
    collaborators.map((collaborator) => (
      <div data-pagefind-filter={`Authors:${collaborator.frontmatter.name}`} />
    ))
  }
  {tags.map((tag) => <div data-pagefind-filter={`Tags:${tag.id}`} />)}
  <article>
    <Hero
      {description}
      {heroImage}
      inRoadmap={prerequisites !== undefined}
      {pricingPlanId}
      {title}
    >
      <div
        slot="roadmap"
        class="relative mx-auto w-full overflow-y-hidden overflow-x-visible"
      >
        <div class="z-10 mx-auto w-full overflow-hidden">
          <div id="app" class="w-full overflow-hidden">
            <Roadmap
              client:load
              initialNodes={reactFlowNodes}
              initialEdges={reactFlowEdges}
            />
          </div>
        </div>
      </div>
    </Hero>
    {
      videoId && (
        <CourseVideo color={categoryColor} {videoId}>
          <slot />
        </CourseVideo>
      )
    }
    <slot name="description" />
    {
      hasGoal && (
        <Goal color={categoryColor}>
          <slot name="goal" />
        </Goal>
      )
    }
    {
      question && (
        <Question color={categoryColor} {question}>
          <slot name="question" />
        </Question>
      )
    }
    {
      features && (
        <Features color={categoryColor} {features}>
          <slot name="verticalSection" slot="verticalSection" />
          <slot name="feature1" slot="feature1" />
          <slot name="feature2" slot="feature2" />
          <slot name="feature3" slot="feature3" />
          <slot name="feature4" slot="feature4" />
          <slot name="feature5" slot="feature5" />
        </Features>
      )
    }
    {technologies && <TechStack {technologies} color={categoryColor} />}
    {
      hasSkills && (
        <Skills color={categoryColor}>
          <slot name="skills" />
        </Skills>
      )
    }
    {
      instructorEnabled && (
        <Profile color={categoryColor} {collaborators} {thanks} />
      )
    }
    {
      isBundle ? (
        <BundledCourses color={categoryColor} {bundledCourses} />
      ) : (
        <Curriculum
          color={categoryColor}
          courseSlug={course.slug}
          {pricingPlanId}
        />
      )
    }
    <Pricing
      {includedInMembership}
      {benefits}
      {bundledCourses}
      color={categoryColor}
      courseSlug={course.slug}
      {pricingPlanId}
      {title}
    />
    <CourseFAQ
      {categoryFaqs}
      courseFaqs={faqs}
      color={categoryColor}
      isBundle={benefits === undefined}
    />
  </article>
</BaseLayout>
<style is:global>
  #app {
    width: 100vw;
    height: 100vh;
  }
  .react-flow__handle {
    opacity: 0;
  }
  .legend {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
    align-items: center;
    font-family: Arial, sans-serif;
  }

  .legend-item {
    display: flex;
    align-items: center;
  }

  .legend-color {
    width: 20px;
    height: 20px;
    display: inline-block;
    margin-right: 0.5em;
    border: 1px solid #333;
  }

  .legend-line {
    width: 40px;
    height: 0;
    border-top: 2px solid black;
    margin-right: 0.5em;
  }

  .dashed {
    border-top-style: dashed;
  }
</style>
