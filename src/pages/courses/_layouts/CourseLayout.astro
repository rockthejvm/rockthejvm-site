---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { getEntry, type CollectionEntry } from "astro:content";
import Hero from "../_sections/Hero.astro";
import Goal from "../_sections/Goal.astro";
import Question from "../_sections/Question.astro";
import Features from "../_sections/Features.astro";
import Skills from "../_sections/Skills.astro";
import Pricing from "../_sections/Pricing.astro";
import CourseFAQ from "../_sections/CourseFAQ.astro";
import Profile from "@components/Profile.astro";
import BundledCourses from "../_sections/BundledCourses.astro";
import Curriculum from "../_sections/Curriculum.astro";
import CourseVideo from "../_sections/CourseVideo.astro";
import TechStack from "../_sections/TechStack.astro";

const { slug } = Astro.params;
const course = await getEntry("courses", slug!) as CollectionEntry<"courses">;
const frontmatter = course!.data;
const category = await getEntry("courseCategories", frontmatter.category.id) as CollectionEntry<"courseCategories">;
const {
  description,
  features,
  image,
  question,
  pricingPlanId,
  technologies,
  title,
} = frontmatter;

const courseList = course.data.bundledCourses ? await Promise.all(course.data.bundledCourses!.map(async (c) => await getEntry("courses", c.slug))) : [];

const hasGoalSlot = Astro.slots.goal !== undefined;
const hasSkillsSlot = Astro.slots.skills !== undefined;

const collaborator = course.data.collaborator ? await getEntry("authors", course.data.collaborator!.id) : null;

const structuredData =
  {
  "@context": "https://schema.org",
  "@type": "Course",
  "name": title,
  "description": description,
  "provider": {
    "@type": "Organization",
    "name": "Rock the JVM",
    "sameAs": "https://rockthejvm.com/"
  }
}

---

<BaseLayout {description} {title} structuredData={JSON.stringify(structuredData)}>
  <article>
    <Hero {description} {image} {pricingPlanId} slug={slug!} {title} />
    {course.data.video &&
      <CourseVideo color={category.data.color} {category} video={course.data.video} />
    }
    {hasGoalSlot &&
      <Goal color={category.data.color} {category}>
        <slot name="goal" />
      </Goal>
    }
    {
      question && (
        <Question color={category.data.color} {category} image={question.image} {question}>
          <slot name="question" />
        </Question>
      )
    }
    {features && Object.keys(features).length > 0 &&
      <Features color={category.data.color} {features}>
        <slot name="feature1" slot="feature1" />
        <slot name="feature2" slot="feature2" />
        <slot name="feature3" slot="feature3" />
        <slot name="feature4" slot="feature4" />
        <slot name="feature5" slot="feature5" />
      </Features>
    }
    {technologies &&
      <TechStack {technologies} color={category.data.color} {category} />
    }
    {hasSkillsSlot &&
      <Skills color={category.data.color} {category}>
        <slot name="skills" />
      </Skills>
    }
    <Profile color={category.data.color} {collaborator} {category}/>
    {category.id === "bundle" &&
      (
        <BundledCourses color={category.data.color} {courseList} />
      )
    }
    {category.id !== "bundle" &&
      <Curriculum color={category.data.color} courseSlug={course.slug} pricingPlanId={course.data.pricingPlanId}/>
    }
    <Pricing {course} pricingPlanId={pricingPlanId!} color={category.data.color}/>
    <CourseFAQ faq={course.data.faqs ?? []} color={category.data.color} {category}/>
  </article>
</BaseLayout>
</BaseLayout>
