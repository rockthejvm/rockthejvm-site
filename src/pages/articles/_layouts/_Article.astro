---
import { getEntry } from "astro:content";
import Base from "../../../layouts/Base.astro";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../../../components/FormattedDate.astro";
import type { MarkdownHeading } from "astro";
import TableOfContents from "../../../components/TableOfContents.astro";
import NarrowContainer from "../../../containers/NarrowContainer";
import AuthorSmall from "../../../components/AuthorSmall.astro";
import AuthorWide from "../../../components/AuthorWide.astro";
import Prose from "@/components/Prose.astro";
import TagList from "@/components/TagList.astro";

interface Props {
  article: CollectionEntry<"articles">;
  headings: MarkdownHeading[];
  minutesRead?: number;
}

const { article, headings, minutesRead } = Astro.props;
const frontmatter = article.data;
const {
  canonicalUrl,
  description,
  excerpt,
  heroImage,
  publishedDate,
  summary,
  tags,
  title,
  updatedDate,
} = frontmatter;
const author = await getEntry(
  frontmatter.author.collection,
  frontmatter.author.id
);
const series = frontmatter.series
  ? await getEntry(frontmatter.series.collection, frontmatter.series.id)
  : undefined;
const video = frontmatter.video
  ? await getEntry(frontmatter.video.collection, frontmatter.video.id)
  : undefined;

const banner: ImageMetadata = "../assets/images/banner.jpeg";
---

<Base
  article={{
    author: {
      name: author.data.name,
      // add a twitter username if available
      twitter: author.data.socials?.twitter,
    },
    updatedTime: updatedDate,
    publishedTime: publishedDate,
    section: "Programming",
    tags: tags,
    video: video?.data.canonicalUrl
      ? new URL(video.data.canonicalUrl)
      : undefined,
  }}
  canonicalUrl={canonicalUrl ? new URL(canonicalUrl) : undefined}
  description={description ?? excerpt}
  image={heroImage
    ? { alt: heroImage.alt, src: heroImage.image.src }
    : undefined}
  {title}
  type="article"
>
  <NarrowContainer>
    <article>
      <header>
        <Prose class="max-w-none">
          <h1>{title}</h1>
        </Prose>
        <a href=`/authors/${frontmatter.author.id}` class="mt-auto">
          <AuthorSmall {author} {minutesRead}>
            <p>
              Last updated: {
                updatedDate ? (
                  <FormattedDate date={updatedDate} />
                ) : (
                  <FormattedDate date={publishedDate} />
                )
              }
            </p>
          </AuthorSmall>
        </a>
        <TagList {tags} />
      </header>
      <Prose>
        <TableOfContents {headings} />
        <slot />
      </Prose>
      <footer>
        <AuthorWide {author} />
      </footer>
    </article>
  </NarrowContainer>
</Base>
