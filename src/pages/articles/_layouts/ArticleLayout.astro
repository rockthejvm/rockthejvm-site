---
import ArticleSeries from "@components/ArticleSeries.astro";
import MyYouTube from "@components/MyYouTube.astro";
import Prose from "@components/Prose.astro";
import SocialShare from "@components/SocialShare.astro";
import TagList from "@components/TagList.astro";
import site from "@data/site.json";
import type { MarkdownHeading } from "astro";
import type { CollectionEntry } from "astro:content";
import { getEntries, getEntry } from "astro:content";
import AuthorWide from "../../../components/AuthorWide.astro";
import Byline from "../../../components/Byline.astro";
import FormattedDate from "../../../components/FormattedDate.astro";
import TableOfContents from "../../../components/TableOfContents.astro";
import NarrowContainer from "../../../containers/NarrowContainer";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import FloatingActionMenuHelper from "../_components/FloatingActionMenuHelper";

interface Props {
  article: CollectionEntry<"articles">;
  headings: MarkdownHeading[];
  minutesRead?: number;
}

const { article, headings, minutesRead } = Astro.props;
const frontmatter = article.data;
const {
  canonicalUrl,
  description,
  excerpt,
  heroImage,
  publishedDate,
  repositoryUrl,
  title,
  updatedDate,
  videoId,
} = frontmatter;
const author = await getEntry(
  frontmatter.author.collection,
  frontmatter.author.id,
);
const tags = await getEntries(frontmatter.tags);

const structuredData = JSON.stringify({
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  author: [
    {
      "@type": "Person",
      name: author.data.name,
      url: `${Astro.site}/authors/${author.id}`,
    },
  ],
  publisher: {
    "@type": "Organization",
    name: site.name,
    url: Astro.site,
  },
  dateModified: updatedDate,
  datePublished: publishedDate,
  headline: title,
  image: heroImage?.image.src,
});
---

<BaseLayout
  article={{
    author: {
      name: author.data.name,
      // add a twitter username if available
      twitter: author.data.socials?.twitter,
    },
    updatedTime: updatedDate,
    publishedTime: publishedDate,
    section: "Programming",
    tags: tags.map((tag) => tag.id),
    // video: video?.data.canonicalUrl
    //   ? new URL(video.data.canonicalUrl)
    //   : undefined,
  }}
  canonicalUrl={canonicalUrl ? new URL(canonicalUrl) : undefined}
  description={description ?? excerpt}
  image={heroImage
    ? { alt: heroImage.alt, src: heroImage.image.src }
    : undefined}
  {structuredData}
  {title}
  type="article"
>
  <NarrowContainer>
    <article class="pt-16 md:pt-8">
      <header>
        <Prose class="max-w-none">
          <h1>{title}</h1>
        </Prose>
        <Byline {author}>
          {
            minutesRead && (
              <p>
                {minutesRead} min read &nbsp;â€¢&nbsp;{" "}
                {
                  <FormattedDate
                    date={updatedDate ? updatedDate : publishedDate}
                  />
                }
              </p>
            )
          }
          <TagList {tags} />
        </Byline>
        <SocialShare />
        {videoId && <MyYouTube id={videoId} />}
      </header>
      <!-- <div class="lg:hidden fixed bottom-4 right-4">
        <a class="flex flex-col align-center justify-center content-center" href="#toc">
          <div class="mx-auto"><CaretUp /></div>
          <TOC />
        </a>
      </div> -->
      <div class="xl:flex xl:flex-row">
        <Prose class="my-4 prose-h2:mt-2">
          <div id="toc" class="hidden lg:block xl:hidden">
            <TableOfContents {headings} {repositoryUrl} {videoId} />
          </div>
          <slot />
          <ArticleSeries {article} />
        </Prose>
        <div
          class="no-scrollbar sticky left-full top-0 ml-2 hidden max-h-[90vh] max-w-sm justify-end self-start overflow-y-scroll px-2 xl:block"
        >
          <Prose class="prose-h2:mt-2"
            ><TableOfContents {headings} {repositoryUrl} {videoId} /></Prose
          >
        </div>
      </div>
      <footer>
        <SocialShare />
        <AuthorWide {author} />
      </footer>
    </article>
  </NarrowContainer>
  <FloatingActionMenuHelper client:load>
    <Prose class="prose-h2:mt-2" slot="toc">
      <TableOfContents
        {headings}
        {repositoryUrl}
        {videoId}
        hideButtons={false}
      />
    </Prose>
    <SocialShare slot="share" />
  </FloatingActionMenuHelper>
</BaseLayout>
