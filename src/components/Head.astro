---
import site from "../data/site.json";

interface Props {
  article?: {
    author: {
      name: string;
      twitter?: string;
    };
    updatedTime?: Date;
    publishedTime: Date;
    section: string;
    tags: string[];
    video?: URL;
  };
  canonicalUrl: URL;
  forcedTheme?: string;
  description: string;
  error: boolean;
  image: {
    alt: string;
    src: string;
  };
  structuredData?: string;
  title: string;
  type: string;
}
const {
  article,
  canonicalUrl,
  forcedTheme,
  description,
  error,
  image: _image,
  structuredData,
  title,
  type,
} = Astro.props;

const image = {
  alt: _image.alt,
  src: `https://${site.domain}${_image.src}`,
};

// const socialLinks = Object.entries(site.socials).map((social) => social[1].url);
---

<head>
  {
    structuredData && (
      <script type="application/ld+json" set:html={structuredData} is:inline />
    )
  }
  <script is:inline define:vars={{ forcedTheme }}>
    const setDataTheme = () => {
      if (forcedTheme) {
        document.documentElement.setAttribute("holiday-theme", forcedTheme);
      }
      document.documentElement.setAttribute(
        "data-theme",
        localStorage.getItem("theme") === "system"
          ? window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light"
          : localStorage.getItem("theme"),
      );
    };
    const setThemeToggle = () => {
      ["systemTheme", "lightTheme", "darkTheme"].forEach(
        (id) => (document.getElementById(id).style.display = "none"),
      );
      const theme = localStorage.getItem("theme");
      document.getElementById(
        theme === "system"
          ? "systemTheme"
          : theme === "light"
            ? "lightTheme"
            : "darkTheme",
      ).style.display = "block";
    };
    const setProse = () => {
      for (const element of document.getElementsByClassName("prose"))
        if (document.documentElement.getAttribute("data-theme") === "dark") {
          element.classList.add("prose-invert");
        } else {
          element.classList.remove("prose-invert");
        }
    };

    if (localStorage.getItem("theme") === null) {
      localStorage.setItem("theme", "system");
    }
    setDataTheme();
    document.addEventListener("DOMContentLoaded", () => {
      setProse();
      if (!forcedTheme) {
        setThemeToggle();
        document.getElementById("themeToggle").addEventListener("click", () => {
          localStorage.setItem(
            "theme",
            localStorage.getItem("theme") === "system"
              ? "light"
              : localStorage.getItem("theme") === "light"
                ? "dark"
                : "system",
          );
          setDataTheme();
          setProse();
          setThemeToggle();
        });
      }
    });
  </script>
  <Fragment>
    <meta charset="utf-8" />
    <meta name="generator" content={Astro.generator} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="light dark" />
    <link
      rel="alternate"
      type="application/rss+xml"
      title={site.name}
      href={new URL("/articles/feed.xml", Astro.site)}
    />
    <link rel="sitemap" href={new URL("sitemap-index.xml", Astro.site)} />
    <title>
      {title} | {site.name}
    </title>
  </Fragment>
  <Fragment>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
    <meta name="msapplication-TileColor" content="#da532c" />
    <meta name="theme-color" content="#ffffff" />
  </Fragment>
  <Fragment>
    <link
      rel="preload"
      href="/fonts/subset-Montserrat-Regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/subset-Montserrat-Bold.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/subset-Montserrat-Italic.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/subset-Montserrat-BoldItalic.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
  </Fragment>

  {
    !error && (
      <Fragment>
        <link rel="canonical" href={canonicalUrl} />
        <meta name="description" content={description} />
        {article && (
          <Fragment>
            <meta property="article:author" content={article.author.name} />
            {article.updatedTime && (
              <meta
                property="article:modified_time"
                content={article.updatedTime.toISOString()}
              />
            )}
            <meta
              property="article:published_time"
              content={article.publishedTime.toISOString()}
            />
            <meta property="article:section" content={article.section} />
            {article.tags.map((tag) => (
              <meta property="article:tag" content={tag} />
            ))}
            {article.video && (
              <meta property="og:video" content={article.video} />
            )}
            {article.updatedTime && (
              <meta
                property="og:updated_time"
                content={article.updatedTime.toISOString()}
              />
            )}
          </Fragment>
        )}
        <meta property="og:description" content={description} />
        <meta property="og:image:alt" content={image.alt} />
        {/* <meta property="og:image:height" content= /> */}
        <meta property="og:image:secure_url" content={image.src} />
        {/* <meta property="og:image:type" content=`image/${}` /> */}
        <meta property="og:image:url" content={image.src} />
        {/* <meta property="og:image:width" content= /> */}
        <meta property="og:image" content={image.src} />
        <meta property="og:locale" content="en_US" />
        <meta property="og:site_name" content={site.name} />
        <meta property="og:title" content={title} />
        <meta property="og:type" content={type} />

        <meta property="og:url" content={canonicalUrl} />
        <meta property="twitter:card" content="summary_large_image" />
        <meta
          property="twitter:creator"
          content={article?.author.twitter ?? site.socials.twitter.handle}
        />
        <meta property="twitter:description" content={description} />
        <meta property="twitter:image:alt" content={image.alt} />
        <meta property="twitter:image" content={image.src} />
        <meta property="twitter:site" content={site.socials.twitter.handle} />
        <meta property="twitter:title" content={title} />
        <meta property="twitter:url" content={canonicalUrl} />
      </Fragment>
    )
  }
</head>
